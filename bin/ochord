#!/usr/bin/env ruby
# vim : ft=ruby : fileencoding=utf-8 :
# Header {{{
require 'colored'
require 'json'

HELP = <<EOF
use `ochord [option] [arg1] [arg2]`
Here are the availible options
==============================
   - #{"create".red}        Create OpenChord network
   - #{"join".red}          Join OpenChord network
   - #{"insert".red}        Insert the given data (arg1, arg2 required)
   - #{"delete".red}        Delete the entry of the given key (arg1 required)
   - #{"retrieve".red}      Retrieve the entry of the given key (arg1 required)
   - #{"info".red}          Print out useful variables
EOF

#}}}
class Launcher
  # Variables {{{
  @@chordcmd = {
    :create   => "eclipse.Create",
    :join     => "eclipse.Join",
    :insert   => "eclipse.Insert",
    :delete   => "eclipse.Delete",
    :retrieve => "eclipse.Retrieve"
  }

  @@chordcmd = Hash[@@chordcmd.map do |k,str| 
    [k, "java -cp .:../build/classes:../config:../lib/log4j.jar #{str}"]
  end]

  @@methods = {
    :create =>    -> do 
      `ssh #{@nodelist['master_address']} #{@@chordcmd[:create]} &`  # Run master
      order @@chordcmd[:join] + " " + @nodelist['master_address']
      puts "--------------Network Created-----------------"
    end,
    :close =>     -> do 
      `ssh #{@nodelist['master_address']} #{@@chordcmd[:close]} &`  # Run master
      order(@@chordcmd[:close]).map(:join)
      puts "--------------Network Close-------------------"
    end,
    :insert =>   -> (key, val) do

    end,
    :delete =>   -> (key) do

    end,
    :retrieve => -> (val) do 

    end,
    :info =>     -> do
      require 'awesome_print'
      ap @nodelist 
    end
  } 
  #}}} -------------------------------------------------------------------
  def initialize(argv, filepath)
    Signal.trap("INT") { |signo| puts "Signal <#{Signal.signame(signo)}> caught, finishing..." }
    f = File.open(filepath, 'rb')
    @nodelist = JSON.parse(f.read)
    f.close

    (print HELP; exit) unless argv.any? and @@methods.include?(argv[0].to_sym)
    instance_exec(&@@methods[ARGV[0].to_sym])
  end

  def order(command)
    threadpool = Array.new
    @nodelist['nodes'].each do |node|
      threadpool.push Thread.new { `ssh #{node} #{command} &` }
    end
    threadpool
  end

  def join(tp)
    tp.map(&:join)
  end
end

raise 'ECLIPSE_PATH env variable is not defined' unless ENV["ECLIPSE_PATH"]
Launcher.new(ARGV, ENV["ECLIPSE_PATH"] + "/etc/eclipse.json")
