#!/usr/bin/env ruby
# vim: ft=ruby : fileencoding=utf-8 : foldmethod=syntax : foldlevel=1 : foldnestmax=2
require 'colored'
require 'json'

class String
  def warnout; warn self; end; 
end

class Launcher
  HELP = <<-EOF
use `ochord [option] [arg1] [arg2]`
Here are the available options
==============================
#{[ ["create".red    , "Create OpenChord network"]                            ,
    ["join".red      , "Join OpenChord network"]                              ,
    ["insert".red    , "Insert the given data (arg1, arg2 required)"]         ,
    ["delete".red    , "Delete the entry of the given key (arg1 required)"]   ,
    ["retrieve".red  , "Retrieve the entry of the given key (arg1 required)"] ,
    ["info".green    , "Print out useful variables"]                          ,
    ["quiet".green   , "do not printout anything"]                            ,
    ["help".green    , "this"] ]
  .map { |item| "%20.20s  %-60.60s\n" % [item[0], item[1]] }.join }
EOF

  def initialize argv:, filepath:
    Signal.trap("INT") { |signo| puts "Signal <#{Signal.signame(signo)}> caught, finishing..." }

    # Create the dictionary to call the OpenChord routines
    @@chordcmd = %i[create join insert delete retrieve].map do |k| 
      [k, "java -cp .:../build/classes:../config:../lib/log4j.jar eclipse.#{k.to_s.capitalize}"]
    end.to_h

    # Load configuration JSON file
    f = File.open(filepath, 'rb')
    @nodelist = JSON.parse(f.read)
    f.close

    # Run the commands
    fail unless argv.any? 
    send argv[0]

  rescue => e
    { "Errno::ENOENT" => "File not found, change filepath",
      "NoMethodError" => "Wrong options passed to the program",
      "RuntimeError"  => "Not given option" } [e.class.name].red.warnout
    abort HELP
  end

  def order (command)
    threadpool = Array.new
    @nodelist['nodes'].each do |node|
      threadpool.push Thread.new { `ssh #{node} #{command} &`; @pidlist[node] = $?.pid }
    end
    threadpool
  end

  def join (tp)
    tp.map(&:join)
  end

  def info
    require 'awesome_print'
    ap @nodelist
    ap @@chordcmd
  end

  def close
    `ssh #{@nodelist['master_address']} #{@@chordcmd[:close]} &`  # Run master
    order(@@chordcmd[:close]).map(:join)
    puts "--------------Network Close-------------------"
  end

  def create
    `ssh #{@nodelist['master_address']} #{@@chordcmd[:create]} &`  # Run master
    order @@chordcmd[:join] + " " + @nodelist['master_address']
    puts "--------------Network Created-----------------"
  end
end

raise 'ECLIPSE_PATH env variable is not defined' unless ENV["ECLIPSE_PATH"]
Launcher.new  argv: ARGV, 
              filepath: ENV["ECLIPSE_PATH"] + "/etc/eclipse.json"
