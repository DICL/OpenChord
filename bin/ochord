#!/usr/bin/env ruby
# vim : ft=ruby : fileencoding=utf-8 :
require 'colored'
require 'json'

HELP = <<EOF
use `ochord [option] [arg1] [arg2]`
Here are the availible options
==============================
   - #{"create".red}        Create OpenChord network
   - #{"join".red}          Join OpenChord network
   - #{"insert".red}        Insert the given data (arg1, arg2 required)
   - #{"delete".red}        Delete the entry of the given key (arg1 required)
   - #{"retrieve".red}      Retrieve the entry of the given key (arg1 required)
EOF

class Launcher
  @@javacmd = "java -cp .:../build/classes:../config:../lib/log4j.jar"
  @@chordcmd = {
    :create   => "#{@@javacmd} eclipse.Create",
    :join     => "#{@@javacmd} eclipse.Join",
    :insert   => "#{@@javacmd} eclipse.Insert",
    :delete   => "#{@@javacmd} eclipse.Delete",
    :retrieve => "#{@@javacmd} eclipse.Retrieve"
  }

  def initialize(argv, filepath = nil)
    Signal.trap("INT") { |signo| puts "Signal <#{Signal.signame(signo)}> caught, finishing..." }
    parse_args(argv)

    return unless filepath 
    content = File.open(filepath, 'rb').read
    @nodelist = JSON.parse(content)
  end

  def parse_args(args)
    (print HELP; exit) if not ARGV[0] or not @javaargv = @@chordcmd[ARGV[0].to_sym]
    puts "Running OpenChord with those args: #{@@javacmd} #{@javaargv}"
  end

  def open()
    `ssh #{@nodelist['master']} #{@@chordcmd[:create]} &`  # Run master
    order @@chordcmd[:join] + " " + @nodelist['master']
    puts "--------------Network Created-----------------"
  end 

  def close()
    `ssh #{@nodelist['master']} #{@@chordcmd[:close]} &`  # Run master
    order @@chordcmd[:close]
    puts "--------------Network Close-------------------"
  end 

  def order(command)
    @nodelist['nodes'].each { |node| `ssh #{node} #{command} &` }
  end

  def run()
    `#{@javaargv}`
  end
end

Launcher.new(ARGV).run
